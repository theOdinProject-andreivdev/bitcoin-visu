{"version":3,"sources":["BtcNet.js","BlockUI.js","TxUI.js","App.js","index.js"],"names":["BtcNet","ws","WebSocket","subscribeTo","val","a","readyState","OPEN","Promise","resolve","reject","currentAttempt","interval","setInterval","maxNumberOfAttempts","clearInterval","Error","send","JSON","stringify","op","console","error","startListen","onNewTxCallback","onNewBlockCallback","onmessage","evt","received_msg","parse","data","x","hash","getTxForBlock","readyCallback","axios","get","then","response","tx","catch","log","BlockUI","props","useState","width","posx","number","posy","rotx","setRotx","roty","setRoty","useFrame","position","rotation","scale","args","color","TxUI","Math","random","height","mesh","useRef","randomNumber","min","max","value","current","y","ref","App","transactions","Map","transactionsInBlocks","blocks","init","window","btcnet","onBlockTXsReceived","txsInBlock","size","forEach","txInBlock","has","set","timesReported","forceUpdate","clear","alert","txList","blockList","this","push","blockNr","cnv","document","querySelector","className","style","display","camera","fov","map","offsetWidth","offsetHeight","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7603a45b.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BtcNet = () => {\n  let ws = new WebSocket(\"wss://ws.blockchain.info/inv\");\n\n  const waitForOpenConnection = () => {\n    return new Promise((resolve, reject) => {\n      const maxNumberOfAttempts = 100;\n      const intervalTime = 100; //ms\n\n      let currentAttempt = 0;\n      const interval = setInterval(() => {\n        if (currentAttempt > maxNumberOfAttempts - 1) {\n          clearInterval(interval);\n          reject(new Error(\"Maximum number of attempts exceeded\"));\n        } else if (ws.readyState === ws.OPEN) {\n          clearInterval(interval);\n          resolve();\n        }\n        currentAttempt++;\n      }, intervalTime);\n    });\n  };\n\n  const subscribeTo = async (val) => {\n    if (ws.readyState !== ws.OPEN) {\n      try {\n        await waitForOpenConnection(ws);\n        ws.send(JSON.stringify({ op: val }));\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      ws.send(JSON.stringify({ op: val }));\n    }\n  };\n\n  const startListen = (onNewTxCallback, onNewBlockCallback) => {\n    ws.onmessage = function (evt) {\n      let received_msg = JSON.parse(evt.data);\n      if (received_msg.op === \"utx\") {\n        onNewTxCallback(received_msg.x.hash);\n      }\n      if (received_msg.op === \"block\") {\n        onNewBlockCallback(received_msg.x.hash);\n      }\n    };\n  };\n\n  const getTxForBlock = (hash, readyCallback) => {\n    axios\n      .get(\"https://blockchain.info/rawblock/\" + hash + \"?&cors=true\")\n      .then(function (response) {\n        readyCallback(response.data.tx);\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n      .then(function () {});\n  };\n  return { subscribeTo, startListen, getTxForBlock };\n};\n\nexport default BtcNet;\n","import React, { useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nconst BlockUI = (props) => {\n  const [posx, setPosx] = useState(props.width * 0.09);\n  const [posy, setPosy] = useState(props.number * 20 - 75);\n  const [rotx, setRotx] = useState(0);\n  const [roty, setRoty] = useState(0);\n\n  useFrame(() => {\n    setRotx(rotx + 0.01);\n    setRoty(roty + 0.01);\n  });\n\n  return (\n    <mesh\n      position={[posx, posy, 0]}\n      rotation={[rotx, roty, 0]}\n      scale={[10, 10, 10]}\n    >\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={\"orange\"} />\n    </mesh>\n  );\n};\n\nexport default BlockUI;\n","import React, { useRef, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\n\nconst TxUI = (props) => {\n  const [posx, setPosx] = useState(-(props.width * 0.1));\n  const [posy, setPosy] = useState(\n    Math.random() * (props.height * 0.1) - (props.height * 0.1) / 2\n  );\n  const [rotx, setRotx] = useState(0);\n  const [roty, setRoty] = useState(0);\n  const mesh = useRef();\n\n  useFrame(() => {\n    //this is too resource heavy\n    //mesh.current.position.y = mesh.current.position.y + randomNumber(-0.1, 0.1);\n    if (props.value == 0) {\n      mesh.current.position.x =\n        mesh.current.position.x + randomNumber(0.2, 0.2);\n      mesh.current.position.y =\n        mesh.current.position.y + randomNumber(0.2, 0.2);\n    } else {\n      if (mesh.current.position.x < props.width * 0.08) {\n        mesh.current.position.x =\n          mesh.current.position.x + randomNumber(0.2, 0.2);\n      } else {\n        //this is too resource heavy\n        //  mesh.current.position.x =\n        //    mesh.current.position.x + randomNumber(-0.1, 0.1);\n      }\n    }\n  });\n\n  function randomNumber(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n  return (\n    <mesh\n      ref={mesh}\n      position={[posx, posy, 0]}\n      rotation={[rotx, roty, 0]}\n      scale={[0.5, 0.5, 0.5]}\n    >\n      <sphereBufferGeometry args={[1]} />\n      <meshStandardMaterial color={\"hotpink\"} />\n    </mesh>\n  );\n};\n\nexport default TxUI;\n","import \"./App.css\";\nimport BtcNet from \"./BtcNet\";\nimport BlockUI from \"./BlockUI\";\nimport { Canvas } from \"react-three-fiber\";\nimport React, { Component } from \"react\";\nimport TxUI from \"./TxUI\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.transactions = new Map();\n    this.transactionsInBlocks = 0;\n    this.blocks = new Map();\n    this.init();\n  }\n\n  init() {\n    console.log(\"Init\");\n    if (\"WebSocket\" in window) {\n      let btcnet = BtcNet();\n\n      btcnet.subscribeTo(\"unconfirmed_sub\");\n      btcnet.subscribeTo(\"blocks_sub\");\n\n      const onNewTx = (hash) => {\n        const timesReported = this.transactions.get(hash);\n        if (timesReported > 0) this.transactions.set(hash, timesReported + 1);\n\n        this.transactions.set(hash, 1);\n        this.forceUpdate();\n      };\n\n      const onNewBlock = (hash) => {\n        const timesReported = this.blocks.get(hash);\n        if (timesReported > 0) this.blocks.set(hash, timesReported + 1);\n\n        if (this.blocks.size > 5) this.blocks.clear();\n\n        this.blocks.set(hash, 1);\n\n        btcnet.getTxForBlock(hash, onBlockTXsReceived);\n      };\n      const onBlockTXsReceived = (txsInBlock) => {\n        console.log(\"Size before block: \" + this.transactions.size);\n        txsInBlock.forEach((txInBlock) => {\n          if (this.transactions.has(txInBlock.hash)) {\n            this.transactions.set(txInBlock.hash, 0);\n            //this.transactions.delete(txInBlock.hash);\n            this.transactionsInBlocks++;\n          }\n        });\n        console.log(\"Size after block: \" + this.transactions.size);\n      };\n\n      btcnet.startListen(onNewTx, onNewBlock);\n    } else {\n      alert(\"WebSocket NOT supported by your Browser!\");\n    }\n  }\n\n  render() {\n    let txList = [];\n    let blockList = [];\n    for (let [key, value] of this.transactions) {\n      txList.push(value);\n    }\n    let blockNr = 0;\n    for (let [key, value] of this.blocks) {\n      blockList.push(blockNr);\n      blockNr++;\n    }\n\n    var cnv = document.querySelector(\"canvas\");\n\n    return (\n      <div className=\"App\">\n        <div style={{ display: \"grid\", height: \"100%\" }}>\n          <div className=\"card\">\n            <div className=\"card-body\">\n              Pending transactions: {this.transactions.size}\n            </div>\n            <div className=\"card-body\">\n              Transactions in blocks: {this.transactionsInBlocks}\n            </div>\n          </div>\n          <Canvas\n            className=\"canvas\"\n            camera={{ fov: 50, position: [0, 0, 200] }}\n          >\n            <ambientLight />\n            <pointLight position={[10, 10, 10]} />\n\n            {txList.map((tx) => (\n              <TxUI\n                value={tx}\n                width={cnv.offsetWidth}\n                height={cnv.offsetHeight}\n              />\n            ))}\n\n            {blockList.map((blockNr) => (\n              <BlockUI\n                key={blockNr}\n                number={blockNr}\n                width={cnv.offsetWidth}\n                height={cnv.offsetHeight}\n              />\n            ))}\n          </Canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}