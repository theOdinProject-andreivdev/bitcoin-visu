{"version":3,"sources":["BtcNet.js","BlockUI.js","TxUI.js","App.js","index.js"],"names":["BtcNet","console","log","ws","WebSocket","subscribeTo","val","a","readyState","OPEN","Promise","resolve","reject","currentAttempt","interval","setInterval","maxNumberOfAttempts","clearInterval","Error","send","JSON","stringify","op","error","startListen","onNewTxCallback","onNewBlockCallback","onmessage","evt","received_msg","parse","data","x","hash","getTxForBlock","readyCallback","axios","get","then","response","tx","catch","BlockUI","props","useState","width","posx","number","posy","rotx","setRotx","roty","setRoty","useFrame","position","rotation","scale","args","color","TxUI","Math","random","height","mesh","useRef","randomNumber","min","max","current","y","value","ref","geometry","geo","material","mat","App","Map","transactions","setTransactions","blocks","setBlocks","transactionsInBlocks","setTransactionsInBlocks","btcnet","setBtcNet","THREE","useEffect","isInitialMount","init","window","onNewTx","onNewBlock","alert","timesReported","prev","size","setTimeout","onBlockTXsReceived","txsInBlock","forEach","txInBlock","has","txList","blockList","transaction","push","blockNr","cnv","document","querySelector","className","style","display","camera","fov","map","offsetWidth","offsetHeight","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.18a38098.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BtcNet = () => {\n  console.log(\"conn\");\n  let ws = new WebSocket(\"wss://ws.blockchain.info/inv\");\n\n  const waitForOpenConnection = () => {\n    return new Promise((resolve, reject) => {\n      const maxNumberOfAttempts = 100;\n      const intervalTime = 100; //ms\n\n      let currentAttempt = 0;\n      const interval = setInterval(() => {\n        if (currentAttempt > maxNumberOfAttempts - 1) {\n          clearInterval(interval);\n          reject(new Error(\"Maximum number of attempts exceeded\"));\n        } else if (ws.readyState === ws.OPEN) {\n          clearInterval(interval);\n          resolve();\n        }\n        currentAttempt++;\n      }, intervalTime);\n    });\n  };\n\n  const subscribeTo = async (val) => {\n    if (ws.readyState !== ws.OPEN) {\n      try {\n        await waitForOpenConnection(ws);\n        ws.send(JSON.stringify({ op: val }));\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      ws.send(JSON.stringify({ op: val }));\n    }\n  };\n\n  const startListen = (onNewTxCallback, onNewBlockCallback) => {\n    ws.onmessage = function (evt) {\n      let received_msg = JSON.parse(evt.data);\n      if (received_msg.op === \"utx\") {\n        onNewTxCallback(received_msg.x.hash);\n      }\n      if (received_msg.op === \"block\") {\n        onNewBlockCallback(received_msg.x.hash);\n      }\n    };\n  };\n\n  const getTxForBlock = (hash, readyCallback) => {\n    axios\n      .get(\"https://blockchain.info/rawblock/\" + hash + \"?&cors=true\")\n      .then(function (response) {\n        readyCallback(response.data.tx);\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n      .then(function () {});\n  };\n  return { subscribeTo, startListen, getTxForBlock };\n};\n\nexport default BtcNet;\n","import React, { useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nconst BlockUI = (props) => {\n  const [posx, setPosx] = useState(props.width * 0.09);\n  const [posy, setPosy] = useState(props.number * 20 - 75);\n  const [rotx, setRotx] = useState(0);\n  const [roty, setRoty] = useState(0);\n\n  useFrame(() => {\n    setRotx(rotx + 0.01);\n    setRoty(roty + 0.01);\n  });\n\n  return (\n    <mesh\n      position={[posx, posy, 0]}\n      rotation={[rotx, roty, 0]}\n      scale={[10, 10, 10]}\n    >\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshLambertMaterial color={\"orange\"} />\n    </mesh>\n  );\n};\n\nexport default BlockUI;\n","import React, { useRef, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\n\nconst TxUI = (props) => {\n  const [posx, setPosx] = useState(-(props.width * 0.1));\n  const [posy, setPosy] = useState(\n    Math.random() * (props.height * 0.1) - (props.height * 0.1) / 2\n  );\n  const [rotx, setRotx] = useState(0);\n  const [roty, setRoty] = useState(0);\n  const mesh = useRef();\n\n  useFrame(() => {\n    mesh.current.position.y = mesh.current.position.y + randomNumber(-0.1, 0.1);\n    if (props.value == 0) {\n      mesh.current.position.x =\n        mesh.current.position.x + randomNumber(0.1, 0.2);\n      mesh.current.position.y =\n        mesh.current.position.y + randomNumber(0.1, 0.2);\n    } else {\n      if (mesh.current.position.x < props.width * 0.08) {\n        mesh.current.position.x =\n          mesh.current.position.x + randomNumber(0.1, 0.1);\n      } else {\n        mesh.current.position.x =\n          mesh.current.position.x + randomNumber(-0.15, 0.1);\n      }\n    }\n  });\n\n  function randomNumber(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n  return (\n    <mesh\n      ref={mesh}\n      position={[posx, posy, 0]}\n      rotation={[rotx, roty, 0]}\n      scale={[1, 1, 1]}\n      geometry={props.geo}\n      material={props.mat}\n    ></mesh>\n  );\n};\n\nexport default TxUI;\n","import \"./App.css\";\nimport BtcNet from \"./BtcNet\";\nimport BlockUI from \"./BlockUI\";\nimport { Canvas } from \"react-three-fiber\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport TxUI from \"./TxUI\";\nimport * as THREE from \"three\";\n\nconst App = () => {\n  const [transactions, setTransactions] = useState(new Map());\n  const [blocks, setBlocks] = useState(new Map());\n  const [transactionsInBlocks, setTransactionsInBlocks] = useState(0);\n  const [btcnet, setBtcNet] = useState();\n\n  const [geo] = useState(new THREE.CircleBufferGeometry(1, 10, 10));\n  const [mat] = useState(\n    new THREE.MeshBasicMaterial({\n      color: \"hotpink\",\n    })\n  );\n\n  useEffect(() => {\n    setBtcNet(BtcNet());\n  }, []);\n\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      init();\n    }\n  }, [btcnet]);\n\n  const init = () => {\n    console.log(\"Init\");\n    if (\"WebSocket\" in window) {\n      btcnet.subscribeTo(\"unconfirmed_sub\");\n      btcnet.subscribeTo(\"blocks_sub\");\n\n      btcnet.startListen(onNewTx, onNewBlock);\n    } else {\n      alert(\"WebSocket NOT supported by your Browser!\");\n    }\n  };\n\n  const onNewBlock = (hash) => {\n    const timesReported = blocks.get(hash);\n    if (timesReported > 0) {\n      setBlocks((prev) => new Map([...prev, [hash, timesReported + 1]]));\n      return;\n    }\n\n    if (blocks.size > 5) setBlocks(new Map());\n\n    setBlocks((prev) => new Map([...prev, [hash, 1]]));\n    setTimeout(function () {\n      btcnet.getTxForBlock(hash, onBlockTXsReceived);\n    }, 3000);\n  };\n\n  const onNewTx = (hash) => {\n    const timesReported = transactions.get(hash);\n    if (timesReported > 0) {\n      setTransactions((prev) => new Map([...prev, [hash, timesReported + 1]]));\n      return;\n    }\n    setTransactions((prev) => new Map([...prev, [hash, 1]]));\n  };\n\n  const onBlockTXsReceived = (txsInBlock) => {\n    console.log(\"Size before block: \" + transactions.size);\n    txsInBlock.forEach((txInBlock) => {\n      if (transactions.has(txInBlock.hash)) {\n        setTransactions((prev) => new Map([...prev, [txInBlock.hash, 0]]));\n        setTransactionsInBlocks(transactionsInBlocks + 1);\n      }\n    });\n    console.log(\"Size after block: \" + transactions.size);\n  };\n\n  let txList = [];\n  let blockList = [];\n\n  transactions.forEach((transaction) => {\n    txList.push(transaction);\n  });\n  let blockNr = 0;\n\n  blocks.forEach(() => {\n    blockList.push(blockNr++);\n  });\n\n  var cnv = document.querySelector(\"canvas\");\n\n  return (\n    <div className=\"App\">\n      <div style={{ display: \"grid\", height: \"100%\" }}>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            Pending transactions: {transactions.size}\n          </div>\n          <div className=\"card-body\">\n            Transactions in blocks: {transactionsInBlocks}\n          </div>\n        </div>\n        <Canvas className=\"canvas\" camera={{ fov: 50, position: [0, 0, 200] }}>\n          <ambientLight />\n          <pointLight position={[10, 10, 10]} />\n\n          {txList.map((tx) => (\n            <TxUI\n              value={tx}\n              width={cnv.offsetWidth}\n              height={cnv.offsetHeight}\n              geo={geo}\n              mat={mat}\n            />\n          ))}\n\n          {blockList.map((blockNr) => (\n            <BlockUI\n              key={blockNr}\n              number={blockNr}\n              width={cnv.offsetWidth}\n              height={cnv.offsetHeight}\n            />\n          ))}\n        </Canvas>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}