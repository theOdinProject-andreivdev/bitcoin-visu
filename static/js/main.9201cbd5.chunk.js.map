{"version":3,"sources":["BtcNet.js","BlockUI.js","TxUI.js","App.js","index.js"],"names":["BtcNet","console","log","ws","WebSocket","subscribeTo","val","a","readyState","OPEN","Promise","resolve","reject","currentAttempt","interval","setInterval","maxNumberOfAttempts","clearInterval","Error","send","JSON","stringify","op","error","startListen","onNewTxCallback","onNewBlockCallback","onmessage","evt","received_msg","parse","data","x","hash","getTxForBlock","readyCallback","axios","get","then","response","tx","catch","BlockUI","props","useState","width","posx","number","posy","rotx","setRotx","roty","setRoty","useFrame","position","rotation","scale","args","color","TxUI","Math","random","height","posz","rotating","setRotating","randomNumber","rotatingXLimit","mesh","useRef","t","min","max","current","z","value","y","cos","sin","ref","geometry","geo","material","mat","App","transactions","setTransactions","txListInBlocks","setTxListInBlocks","blocks","setBlocks","transactionsInBlocks","setTransactionsInBlocks","btcnet","setBtcNet","THREE","useEffect","isInitialMount","init","window","onNewTx","onNewBlock","alert","Audio","play","size","setTimeout","onBlockTXsReceived","double","forEach","tr","txsInBlock","length","tmptxinblocks","tmptransaction","map","Object","assign","txInBlock","i","splice","blockList","blockNr","push","cnv","document","querySelector","className","style","display","gridTemplateRows","gridTemplateColumns","gridColumn","gridRow","fontSize","camera","fov","offsetWidth","offsetHeight","ReactDOM","render","StrictMode","getElementById"],"mappings":"wRAgEeA,EA9DA,WACbC,QAAQC,IAAI,QACZ,IAAIC,EAAK,IAAIC,UAAU,gCAyDvB,MAAO,CAAEC,YApCQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACdJ,EAAGK,aAAeL,EAAGM,KADP,0CAlBX,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAGIC,EAAiB,EACfC,EAAWC,aAAY,WACvBF,EAAiBG,IACnBC,cAAcH,GACdF,EAAO,IAAIM,MAAM,yCACRf,EAAGK,aAAeL,EAAGM,OAC9BQ,cAAcH,GACdH,KAEFE,MAXmB,QAgBL,OAIdV,EAAGgB,KAAKC,KAAKC,UAAU,CAAEC,GAAIhB,KAJf,gDAMdL,QAAQsB,MAAR,MANc,gCAShBpB,EAAGgB,KAAKC,KAAKC,UAAU,CAAEC,GAAIhB,KATb,yDAAH,sDAoCKkB,YAvBF,SAACC,EAAiBC,GACpCvB,EAAGwB,UAAY,SAAUC,GACvB,IAAIC,EAAeT,KAAKU,MAAMF,EAAIG,MACV,QAApBF,EAAaP,IACfG,EAAgBI,EAAaG,EAAEC,MAET,UAApBJ,EAAaP,IACfI,EAAmBG,EAAaG,EAAEC,QAgBLC,cAXb,SAACD,EAAME,GAC3BC,IACGC,IAAI,oCAAsCJ,EAAO,eACjDK,MAAK,SAAUC,GACdJ,EAAcI,EAASR,KAAKS,OAE7BC,OAAM,SAAUlB,GACftB,QAAQC,IAAIqB,MAEbe,MAAK,kB,QClCGI,EAvBC,SAACC,GAAW,IAAD,EACDC,mBAAuB,IAAdD,EAAME,OADd,mBAClBC,EADkB,aAEDF,mBAAwB,GAAfD,EAAMI,OAAc,KAF5B,mBAElBC,EAFkB,aAGDJ,mBAAS,IAHR,mBAGlBK,EAHkB,KAGZC,EAHY,OAIDN,mBAAS,GAJR,mBAIlBO,EAJkB,KAIZC,EAJY,KAWzB,OALAC,aAAS,WACPH,EAAQD,EAAO,KACfG,EAAQD,EAAO,QAIf,uBACEG,SAAU,CAACR,EAAME,EAAM,GACvBO,SAAU,CAACN,EAAME,EAAM,GACvBK,MAAO,CAAC,GAAI,GAAI,IAHlB,UAKE,mCAAmBC,KAAM,CAAC,EAAG,EAAG,KAChC,qCAAqBC,MAAO,eCwCnBC,EAzDF,SAAChB,GAAW,IAAD,EACEC,oBAAyB,GAAdD,EAAME,OADnB,mBACfC,EADe,aAEEF,mBACtBgB,KAAKC,UAA2B,GAAflB,EAAMmB,QAAgC,GAAfnB,EAAMmB,OAAgB,IAH1C,mBAEfd,EAFe,aAKEJ,oBAAU,MALZ,mBAKfmB,EALe,aAMUnB,oBAAS,IANnB,mBAMfoB,EANe,KAMLC,EANK,OAOsBrB,mBAC1CsB,EAAa,KAAO,OARA,mBAOfC,EAPe,KAUhBC,GAVgB,KAUTC,oBAETC,EAAI,KA8BR,SAASJ,EAAaK,EAAKC,GACzB,OAAOZ,KAAKC,UAAYW,EAAMD,GAAOA,EAEvC,OAhCAlB,aAAS,WACP,GAAqB,OAAjBe,EAAKK,QAGT,GAFIL,EAAKK,QAAQnB,SAASoB,EAAI,IAC5BN,EAAKK,QAAQnB,SAASoB,EAAIN,EAAKK,QAAQnB,SAASoB,EAAI,IAClC,IAAhB/B,EAAMgC,MACRP,EAAKK,QAAQnB,SAAStB,EACpBoC,EAAKK,QAAQnB,SAAStB,EAAIkC,EAAa,GAAK,IAC9CE,EAAKK,QAAQnB,SAASsB,EACpBR,EAAKK,QAAQnB,SAASsB,EAAIV,EAAa,GAAK,IAE9CE,EAAKK,QAAQnB,SAASoB,EAAIN,EAAKK,QAAQnB,SAASoB,EAAI,QAC/C,CACL,GAAIN,EAAKK,QAAQnB,SAAStB,EAAIW,EAAME,MAAQsB,GAAkBH,EAAU,CACtEC,GAAY,GACZ,IAAIjC,EAAIoC,EAAKK,QAAQnB,SAAStB,EAC1B4C,EAAIR,EAAKK,QAAQnB,SAASsB,EAE9BR,EAAKK,QAAQnB,SAAStB,EAAIA,EAAI4B,KAAKiB,IAAIP,GAAKM,EAAIhB,KAAKkB,IAAIR,GACzDF,EAAKK,QAAQnB,SAASsB,EAAIA,EAAIhB,KAAKiB,IAAIP,GAAKtC,EAAI4B,KAAKkB,IAAIR,GAGzDF,EAAKK,QAAQnB,SAAStB,EAAIW,EAAME,MAAQsB,IAC3B,IAAbH,IAEAI,EAAKK,QAAQnB,SAAStB,EAAIoC,EAAKK,QAAQnB,SAAStB,EAAI,QASxD,sBACE+C,IAAKX,EACLd,SAAU,CAACR,EAAME,EAAMe,GACvBR,SAAU,CAAC,EAAG,EAAG,GACjBC,MAAO,CAAC,EAAG,EAAG,GACdwB,SAAUrC,EAAMsC,IAChBC,SAAUvC,EAAMwC,O,OC6IPC,EA5LH,WAAO,IAAD,EACwBxC,mBAAS,IADjC,mBACTyC,EADS,KACKC,EADL,OAE4B1C,mBAAS,IAFrC,mBAET2C,EAFS,KAEOC,EAFP,OAGY5C,mBAAS,IAHrB,mBAGT6C,EAHS,KAGDC,EAHC,OAIwC9C,mBAAS,GAJjD,mBAIT+C,EAJS,KAIaC,EAJb,OAKYhD,qBALZ,mBAKTiD,EALS,KAKDC,EALC,OAOFlD,mBAAS,IAAImD,uBAA2B,EAAG,GAAI,KAAtDd,EAPS,sBAQFrC,mBACZ,IAAImD,oBAAwB,CAC1BrC,MAAO,aAFJyB,EARS,oBAchBa,qBAAU,WACRF,EAAU9F,OACT,IAEH,IAAMiG,EAAiB5B,kBAAO,GAC9B2B,qBAAU,WACJC,EAAexB,QACjBwB,EAAexB,SAAU,EAEzByB,MAED,CAACL,IAEJ,IAAMK,EAAO,WACXjG,QAAQC,IAAI,QACR,cAAeiG,QACjBN,EAAOxF,YAAY,mBACnBwF,EAAOxF,YAAY,cAEnBwF,EAAOrE,YAAY4E,EAASC,IAE5BC,MAAM,6CAIJD,EAAa,SAACpE,GACN,IAAIsE,MACd,uFAEIC,OAEFf,EAAOgB,KAAO,GAAGf,EAAU,IAE/BA,EAAU,GAAD,mBAAKD,GAAL,CAAa,CAAExD,WACxByE,YAAW,WACTb,EAAO3D,cAAcD,EAAM0E,KAC1B,MAGCP,EAAU,SAACnE,GACH,IAAIsE,MACd,kFAEIC,OAEN,IAAII,GAAS,EACbvB,EAAawB,SAAQ,SAACC,GAChBA,EAAG7E,OAASA,IACd2E,GAAS,OAGE,IAAXA,GACFtB,GAAgB,SAACb,GAAD,4BAAiBA,GAAjB,CAA0B,CAAExC,KAAMA,EAAM0C,MAAO,SAG7DgC,EAAqB,SAACI,GAC1BvB,EAAkBuB,IAGpBf,qBAAU,WAER,GADA/F,QAAQC,IAAI,UACkB,IAA1BqF,EAAeyB,OAAnB,CACA,IAAIC,EAAgB,EACpBhH,QAAQC,IAAI,gBACZD,QAAQC,IAAImF,GACZ,IAAI6B,EAAiB7B,EAAa8B,KAAI,SAAC7C,GAAD,OAAO8C,OAAOC,OAAO,GAAI/C,MAC/DrE,QAAQC,IAAI,oBACZD,QAAQC,IAAIgH,GACZ3B,EAAesB,SAAQ,SAACS,GACtBJ,EAAeL,SAAQ,SAACrE,GAClB8E,EAAUrF,OAASO,EAAGP,OACxBO,EAAGmC,MAAQ,EACXsC,WAKNhH,QAAQC,IAAI,sBACZD,QAAQC,IAAIgH,GACZ1B,EAAkB,IAClBF,EAAgB4B,GAChBtB,EAAwBD,EAAuBsB,GAG/CP,YAAW,WACT,IAAIQ,EAAiB7B,EAAa8B,KAAI,SAAC7C,GAAD,OAAO8C,OAAOC,OAAO,GAAI/C,MAC/DrE,QAAQC,IAAI,oBACZD,QAAQC,IAAIgH,GACZ,IAAK,IAAIK,EAAIL,EAAeF,OAAS,EAAGO,GAAK,EAAGA,IACd,IAA5BL,EAAeK,GAAG5C,OACpBuC,EAAeM,OAAOD,EAAG,GAI7BjC,EAAgB4B,KACf,QACF,CAAC7B,IAEJ,IAAIoC,EAAY,GAEZC,EAAU,EAEdjC,EAAOoB,SAAQ,WACbY,EAAUE,KAAKD,QAGjB,IAAIE,EAAMC,SAASC,cAAc,UAEjC,OACE,qBAAKC,UAAU,MAAf,SACE,sBACEC,MAAO,CACLC,QAAS,OACTnE,OAAQ,OACRoE,iBAAkB,iBAClBC,oBAAqB,kBALzB,UAQE,sBACEJ,UAAU,aACVC,MAAO,CAAEI,WAAY,IAAKC,QAAS,aAAcC,SAAU,UAF7D,+FAME,uBANF,6DAQE,uBARF,mJAYE,uBAZF,6BAeA,sBAAKP,UAAU,YAAYC,MAAO,CAAEI,WAAY,IAAKC,QAAS,KAA9D,mCACyBhD,EAAa2B,UAEtC,sBAAKe,UAAU,YAAYC,MAAO,CAAEI,WAAY,IAAKC,QAAS,KAA9D,qCAC2B1C,KAE3B,eAAC,IAAD,CACEoC,UAAU,SACVQ,OAAQ,CAAEC,IAAK,GAAIlF,SAAU,CAAC,EAAG,EAAG,MACpC0E,MAAO,CAAEI,WAAY,aAAcC,QAAS,KAH9C,UAKE,iCACA,4BAAY/E,SAAU,CAAC,GAAI,GAAI,MAE9B+B,EAAa8B,KAAI,SAACL,GACjB,OACE,cAAC,EAAD,CAEEnC,MAAOmC,EAAGnC,MACV9B,MAAO+E,EAAIa,YACX3E,OAAQ8D,EAAIc,aACZzD,IAAKA,EACLE,IAAKA,GALA2B,EAAG7E,SAUbwF,EAAUN,KAAI,SAACO,GAAD,OACb,cAAC,EAAD,CAEE3E,OAAQ2E,EACR7E,MAAO+E,EAAIa,YACX3E,OAAQ8D,EAAIc,cAHPhB,eCpLnBiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASiB,eAAe,W","file":"static/js/main.9201cbd5.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BtcNet = () => {\n  console.log(\"conn\");\n  let ws = new WebSocket(\"wss://ws.blockchain.info/inv\");\n\n  const waitForOpenConnection = () => {\n    return new Promise((resolve, reject) => {\n      const maxNumberOfAttempts = 100;\n      const intervalTime = 100; //ms\n\n      let currentAttempt = 0;\n      const interval = setInterval(() => {\n        if (currentAttempt > maxNumberOfAttempts - 1) {\n          clearInterval(interval);\n          reject(new Error(\"Maximum number of attempts exceeded\"));\n        } else if (ws.readyState === ws.OPEN) {\n          clearInterval(interval);\n          resolve();\n        }\n        currentAttempt++;\n      }, intervalTime);\n    });\n  };\n\n  const subscribeTo = async (val) => {\n    if (ws.readyState !== ws.OPEN) {\n      try {\n        await waitForOpenConnection(ws);\n        ws.send(JSON.stringify({ op: val }));\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      ws.send(JSON.stringify({ op: val }));\n    }\n  };\n\n  const startListen = (onNewTxCallback, onNewBlockCallback) => {\n    ws.onmessage = function (evt) {\n      let received_msg = JSON.parse(evt.data);\n      if (received_msg.op === \"utx\") {\n        onNewTxCallback(received_msg.x.hash);\n      }\n      if (received_msg.op === \"block\") {\n        onNewBlockCallback(received_msg.x.hash);\n      }\n    };\n  };\n\n  const getTxForBlock = (hash, readyCallback) => {\n    axios\n      .get(\"https://blockchain.info/rawblock/\" + hash + \"?&cors=true\")\n      .then(function (response) {\n        readyCallback(response.data.tx);\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n      .then(function () {});\n  };\n  return { subscribeTo, startListen, getTxForBlock };\n};\n\nexport default BtcNet;\n","import React, { useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nconst BlockUI = (props) => {\n  const [posx, setPosx] = useState(props.width * 0.09);\n  const [posy, setPosy] = useState(props.number * 20 - 75);\n  const [rotx, setRotx] = useState(0);\n  const [roty, setRoty] = useState(0);\n\n  useFrame(() => {\n    setRotx(rotx + 0.01);\n    setRoty(roty + 0.01);\n  });\n\n  return (\n    <mesh\n      position={[posx, posy, 0]}\n      rotation={[rotx, roty, 0]}\n      scale={[10, 10, 10]}\n    >\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshLambertMaterial color={\"orange\"} />\n    </mesh>\n  );\n};\n\nexport default BlockUI;\n","import React, { useRef, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\n\nconst TxUI = (props) => {\n  const [posx, setPosx] = useState(-(props.width * 0.1));\n  const [posy, setPosy] = useState(\n    Math.random() * (props.height * 0.1) - (props.height * 0.1) / 2\n  );\n  const [posz, setPosz] = useState(-200);\n  const [rotating, setRotating] = useState(false);\n  const [rotatingXLimit, setRotatingXLimit] = useState(\n    randomNumber(0.035, 0.055)\n  );\n  const mesh = useRef();\n\n  let t = 0.002;\n  useFrame(() => {\n    if (mesh.current === null) return;\n    if (mesh.current.position.z < 0)\n      mesh.current.position.z = mesh.current.position.z + 0.1;\n    if (props.value === 0) {\n      mesh.current.position.x =\n        mesh.current.position.x + randomNumber(0.1, 0.2);\n      mesh.current.position.y =\n        mesh.current.position.y + randomNumber(0.1, 0.2);\n\n      mesh.current.position.z = mesh.current.position.z + 0.25;\n    } else {\n      if (mesh.current.position.x > props.width * rotatingXLimit || rotating) {\n        setRotating(true);\n        let x = mesh.current.position.x;\n        let y = mesh.current.position.y;\n\n        mesh.current.position.x = x * Math.cos(t) - y * Math.sin(t);\n        mesh.current.position.y = y * Math.cos(t) + x * Math.sin(t);\n      }\n      if (\n        mesh.current.position.x < props.width * rotatingXLimit &&\n        rotating === false\n      ) {\n        mesh.current.position.x = mesh.current.position.x + 0.2;\n      }\n    }\n  });\n\n  function randomNumber(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n  return (\n    <mesh\n      ref={mesh}\n      position={[posx, posy, posz]}\n      rotation={[0, 0, 0]}\n      scale={[1, 1, 1]}\n      geometry={props.geo}\n      material={props.mat}\n    ></mesh>\n  );\n};\n\nexport default TxUI;\n","import \"./App.css\";\nimport BtcNet from \"./BtcNet\";\nimport BlockUI from \"./BlockUI\";\nimport { Canvas } from \"react-three-fiber\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport TxUI from \"./TxUI\";\nimport * as THREE from \"three\";\n\nconst App = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [txListInBlocks, setTxListInBlocks] = useState([]);\n  const [blocks, setBlocks] = useState([]);\n  const [transactionsInBlocks, setTransactionsInBlocks] = useState(0);\n  const [btcnet, setBtcNet] = useState();\n\n  const [geo] = useState(new THREE.CircleBufferGeometry(1, 10, 10));\n  const [mat] = useState(\n    new THREE.MeshBasicMaterial({\n      color: \"hotpink\",\n    })\n  );\n\n  useEffect(() => {\n    setBtcNet(BtcNet());\n  }, []);\n\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      init();\n    }\n  }, [btcnet]);\n\n  const init = () => {\n    console.log(\"Init\");\n    if (\"WebSocket\" in window) {\n      btcnet.subscribeTo(\"unconfirmed_sub\");\n      btcnet.subscribeTo(\"blocks_sub\");\n\n      btcnet.startListen(onNewTx, onNewBlock);\n    } else {\n      alert(\"WebSocket NOT supported by your Browser!\");\n    }\n  };\n\n  const onNewBlock = (hash) => {\n    var audio = new Audio(\n      \"http://codeskulptor-demos.commondatastorage.googleapis.com/GalaxyInvaders/bonus.wav\"\n    );\n    audio.play();\n\n    if (blocks.size > 5) setBlocks([]);\n\n    setBlocks([...blocks, { hash }]);\n    setTimeout(function () {\n      btcnet.getTxForBlock(hash, onBlockTXsReceived);\n    }, 3000);\n  };\n\n  const onNewTx = (hash) => {\n    var audio = new Audio(\n      \"https://commondatastorage.googleapis.com/codeskulptor-assets/week7-brrring.m4a\"\n    );\n    audio.play();\n\n    let double = false;\n    transactions.forEach((tr) => {\n      if (tr.hash === hash) {\n        double = true;\n      }\n    });\n    if (double === false)\n      setTransactions((current) => [...current, { hash: hash, value: 1 }]);\n  };\n\n  const onBlockTXsReceived = (txsInBlock) => {\n    setTxListInBlocks(txsInBlock);\n  };\n\n  useEffect(() => {\n    console.log(\"effect\");\n    if (txListInBlocks.length === 0) return;\n    let tmptxinblocks = 0;\n    console.log(\"transactions\");\n    console.log(transactions);\n    let tmptransaction = transactions.map((t) => Object.assign({}, t));\n    console.log(\"tmp transactions\");\n    console.log(tmptransaction);\n    txListInBlocks.forEach((txInBlock) => {\n      tmptransaction.forEach((tx) => {\n        if (txInBlock.hash === tx.hash) {\n          tx.value = 0;\n          tmptxinblocks++;\n        }\n      });\n    });\n\n    console.log(\"tmp transactions 2\");\n    console.log(tmptransaction);\n    setTxListInBlocks([]);\n    setTransactions(tmptransaction);\n    setTransactionsInBlocks(transactionsInBlocks + tmptxinblocks);\n\n    //cleanup\n    setTimeout(function () {\n      let tmptransaction = transactions.map((t) => Object.assign({}, t));\n      console.log(\"tmp transactions\");\n      console.log(tmptransaction);\n      for (let i = tmptransaction.length - 1; i >= 0; i--) {\n        if (tmptransaction[i].value === 0) {\n          tmptransaction.splice(i, 1);\n        }\n      }\n\n      setTransactions(tmptransaction);\n    }, 30000);\n  }, [transactions]);\n\n  let blockList = [];\n\n  let blockNr = 0;\n\n  blocks.forEach(() => {\n    blockList.push(blockNr++);\n  });\n\n  var cnv = document.querySelector(\"canvas\");\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          display: \"grid\",\n          height: \"100%\",\n          gridTemplateRows: \"repeat(3,auto)\",\n          gridTemplateColumns: \"repeat(2,auto)\",\n        }}\n      >\n        <div\n          className=\"card-body \"\n          style={{ gridColumn: \"1\", gridRow: \"1 / span 2\", fontSize: \"0.75em\" }}\n        >\n          bitcoin-visu is a tool for live visualization of the bitcoin network\n          transactions.\n          <br />\n          Every pink dot represents a transaction on the blockchain.\n          <br />\n          Transactions wait on screen until they are confirmed in mined blocks.\n          Once a block appears and a transaction is confirmed, it leaves the\n          screen.\n          <br />\n          Best seen on desktop :)\n        </div>\n        <div className=\"card-body\" style={{ gridColumn: \"2\", gridRow: \"1\" }}>\n          Pending transactions: {transactions.length}\n        </div>\n        <div className=\"card-body\" style={{ gridColumn: \"2\", gridRow: \"2\" }}>\n          Transactions in blocks: {transactionsInBlocks}\n        </div>\n        <Canvas\n          className=\"canvas\"\n          camera={{ fov: 50, position: [0, 0, 200] }}\n          style={{ gridColumn: \"1 / span 2\", gridRow: \"3\" }}\n        >\n          <ambientLight />\n          <pointLight position={[10, 10, 10]} />\n\n          {transactions.map((tr) => {\n            return (\n              <TxUI\n                key={tr.hash}\n                value={tr.value}\n                width={cnv.offsetWidth}\n                height={cnv.offsetHeight}\n                geo={geo}\n                mat={mat}\n              />\n            );\n          })}\n\n          {blockList.map((blockNr) => (\n            <BlockUI\n              key={blockNr}\n              number={blockNr}\n              width={cnv.offsetWidth}\n              height={cnv.offsetHeight}\n            />\n          ))}\n        </Canvas>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}